name: 'Deploy module'
description: 'Deploy module'

inputs:
  templateFilePath:
    description: 'The path to the template file to use for deployment'
    required: true
  parameterFilePath:
    description: 'The path to the parameter file to use for deployment'
    required: true
  location:
    description: 'The location to use for deployment'
    required: true
  resourceGroupName:
    description: 'The resource group to deploy to'
    required: false
  subscriptionId:
    description: 'The subscriptionId to deploy to'
    required: false
  managementGroupId:
    description: 'The managementGroupId to deploy to'
    required: false
  customParameterFileTokens:
    description: 'Additional parameter file token pairs in json format. e.g. {"tokenName":"tokenValue"}'
    required: false
  removeDeployment:
    description: 'Set "true" to set module up for removal'
    default: 'true'
    required: false

outputs:
  deploymentOutput:
    description: 'The module deployment output in json format'
    value: ${{ steps.deploy_step.outputs.deploymentOutput }}

runs:
  using: 'composite'
  steps:
    # [Setup] task(s)
    # ---------------
    - name: 'Setup agent'
      shell: pwsh
      run: |
        # Grouping task logs
        Write-Output "::group::Setup agent"

        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

        # Define PS modules to install on the runner
        $Modules = @(
            @{ Name = 'Az.Accounts' },
            @{ Name = 'Az.Resources' }
        )

        # Additional PS modules need to be installed for the removal step in case it is enabled
        if ('${{ inputs.removeDeployment}}' -eq 'true') {
          $Modules += @(
            @{ Name = 'Az.CognitiveServices' },
            @{ Name = 'Az.Compute' },
            @{ Name = 'Az.KeyVault' },
            @{ Name = 'Az.Monitor' },
            @{ Name = 'Az.OperationalInsights' },
            @{ Name = 'Az.RecoveryServices' }
          )
        }

        # Set agent up
        Set-EnvironmentOnAgent -PSModules $Modules

        Write-Output "::endgroup::"

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    # [Token replacement] task(s)
    # ---------------------------
    - name: 'Replace Parameter File Tokens [${{ inputs.parameterFilePath }}] '
      shell: pwsh
      run: |
        # Grouping task logs
        Write-Output "::group::Replace Parameter File Tokens [${{ inputs.parameterFilePath }}]"

        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFile.ps1')

        # Load Settings File
        $Settings = Get-Content -Path "settings.json" | ConvertFrom-Json -AsHashTable

        # Construct Token Function Input
        $ConvertTokensInputs = @{
          Tokens       = @{}
          FilePath     = '${{ inputs.parameterFilePath }}'
          TokenPrefix  = $Settings.parameterFileTokens.tokenPrefix
          TokenSuffix  = $Settings.parameterFileTokens.tokenSuffix
        }

        # Local tokens
        $ConvertTokensInputs.Tokens += @{
          resourceGroupName = '${{ inputs.resourceGroupName }}'
          subscriptionId    = '${{ inputs.subscriptionId }}'
          managementGroupId = '${{ inputs.managementGroupId }}'
          tenantId          = '${{ env.ARM_TENANT_ID }}'
          deploymentSpId    = '${{ env.DEPLOYMENT_SP_ID }}'
        }

        # Add local tokens
        if ($Settings.parameterFileTokens.localTokens) {
          $tokenMap = @{}
          foreach ($token in $Settings.parameterFileTokens.localTokens) {
            $tokenMap += @{ $token.name = $token.value }
          }
          Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
          $ConvertTokensInputs.Tokens += $tokenMap
        }

        # Add custom tokens (passed in via the pipeline)
        if(-not [String]::IsNullOrEmpty('${{  inputs.customParameterFileTokens }}')) {
          $customTokens = '${{ inputs.customParameterFileTokens }}' | ConvertFrom-Json -AsHashTable
          Write-Verbose ('Using custom parameter file tokens [{0}]' -f ($customTokens.Keys -join ', ')) -Verbose
          $ConvertTokensInputs.Tokens += $customTokens
        }

        # Invoke Token Replacement Functionality
        $null = Convert-TokensInFile @ConvertTokensInputs

        Write-Output "::endgroup::"

    # [Deployment validation] task(s)
    # -------------------------------
    - name: 'Validate [${{ inputs.templateFilePath }}]'
      shell: pwsh
      run: |
        # Grouping task logs
        Write-Output "::group::Validate [${{ inputs.templateFilePath }}]"

        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourceDeployment' 'Test-TemplateWithParameterFile.ps1')

        # ----------- #
        # INVOKE TEST #
        # ----------- #
        $functionInput = @{
          templateFilePath   = '${{ inputs.templateFilePath }}'
          parameterFilePath  = '${{ inputs.parameterFilePath }}'
          location           = '${{ inputs.location }}'
          resourceGroupName  = '${{ inputs.resourceGroupName }}'
          subscriptionId     = '${{ inputs.subscriptionId }}'
          managementGroupId  = '${{ inputs.managementGroupId }}'
        }

        Write-Verbose "Invoke task with" -Verbose
        Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

        Test-TemplateWithParameterFile @functionInput -Verbose

        Write-Output "::endgroup::"

    # [Deployment execution] task(s)
    # ------------------------------
    - name: 'Deploy [${{ inputs.templateFilePath }}] with parameters [${{ inputs.parameterFilePath }}]'
      shell: pwsh
      id: deploy_step
      run: |
        # Grouping task logs
        Write-Output "::group::Deploy [${{ inputs.templateFilePath }}] with parameters [${{ inputs.parameterFilePath }}]"

        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourceDeployment' 'New-ModuleDeployment.ps1')

        $functionInput = @{
          templateFilePath   = Join-Path $env:GITHUB_WORKSPACE '${{ inputs.templateFilePath }}'
          parameterFilePath  = Join-Path $env:GITHUB_WORKSPACE '${{ inputs.parameterFilePath }}'
          location           = '${{ inputs.location }}'
          resourceGroupName  = '${{ inputs.resourceGroupName }}'
          subscriptionId     = '${{ inputs.subscriptionId }}'
          managementGroupId  = '${{ inputs.managementGroupId }}'
          doNotThrow         = $true
        }

        Write-Verbose "Invoke task with" -Verbose
        Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

        # Invoke deployment
        $res = New-ModuleDeployment @functionInput -Verbose

        # Get deployment name
        Write-Output ('::set-output name={0}::{1}' -f 'deploymentName', $res.deploymentName)

        # Populate further outputs
        $deploymentOutputHash=@{}

        foreach ($outputKey in $res.deploymentOutput.Keys) {
          Write-Output ('::set-output name={0}::{1}' -f $outputKey, $res.deploymentOutput[$outputKey].Value)
          $deploymentOutputHash.add($outputKey,$res.deploymentOutput[$outputKey].Value)
        }

        $deploymentOutput = $deploymentOutputHash | ConvertTo-Json -Compress -Depth 100
        Write-Verbose "Deployment output: $deploymentOutput" -Verbose
        Write-Output ('::set-output name={0}::{1}' -f 'deploymentOutput', $deploymentOutput)

        if ($res.ContainsKey('exception')) {
          # Happens only if there is an exception
          throw $res.exception
        }

        Write-Output "::endgroup::"

    # [Deployment removal] task(s)
    # ----------------------------
    - name: 'Remove [${{ inputs.templateFilePath }}] from parameters [${{ inputs.parameterFilePath }}]'
      shell: pwsh
      if: ${{ always() && inputs.removeDeployment == 'true' && steps.deploy_step.outputs.deploymentName != '' }}
      run: |
        # Grouping task logs
        Write-Output "::group::Remove [${{ inputs.templateFilePath }}] from parameters [${{ inputs.parameterFilePath }}]"

        # Load used function
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourceRemoval' 'Initialize-DeploymentRemoval.ps1')

        if (-not [String]::IsNullOrEmpty('${{ steps.deploy_step.outputs.deploymentName }}')) {
          $functionInput = @{
            DeploymentName    = '${{ steps.deploy_step.outputs.deploymentName }}'
            TemplateFilePath  = Join-Path $env:GITHUB_WORKSPACE '${{ inputs.templateFilePath }}'
            ResourceGroupName = '${{ inputs.resourceGroupName }}'
            ManagementGroupId = '${{ inputs.managementGroupId }}'
            Verbose           = $true
          }

          Write-Verbose 'Invoke task with' -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

          Initialize-DeploymentRemoval @functionInput
        }

        Write-Output "::endgroup::"
